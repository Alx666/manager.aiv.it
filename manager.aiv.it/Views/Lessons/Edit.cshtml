@model manager.aiv.it.Lesson

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm("Edit", "Lessons", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
    </div>

    <div class="row row-title">
        <div class="col col-xs-4 col-sm-2">
            <div class="text-left">
                <a class="btn btn-default" href="javascript:window.history.back();">
                    <i class="glyphicon glyphicon-chevron-left pull-left icon-left"></i>
                    <span>Back</span>
                </a>
            </div>
        </div>
        <div class="col col-xs-4 col-sm-8">
            <span class="title">Edit Lesson</span>
        </div>
        <div class="col col-xs-4 col-sm-2">
            <div class="text-right">

                <button type="submit" class="btn btn-primary">
                    <i class="glyphicon glyphicon-floppy-disk pull-right icon-right"></i>
                    <span>Save</span>
                </button>

            </div>
        </div>
    </div>


    <div class="row">

        <div class="col col-xs-12">

            <div class="thumbnail">

                <div class="card-content">
                    <div class="row">
                        <div class="col-xs-12">

                            <section>
                                <h4 class="section-title">Base Data</h4>

                                <div class="form-horizontal">

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.ClassId, "Class", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @if (Session.GetUser().IsOnly(RoleType.Secretary))
                                            {
                                                @Html.DropDownList("ClassId", null, htmlAttributes: new { @class = "form-control", @onchange = "location.href = '/Lessons/Edit?id=" + Model.Id + "&classid='.concat(this.value);", @readonly = "readonly", @disabled = "disabled" })
                                            }
                                            else
                                            {
                                                @Html.DropDownList("ClassId", null, htmlAttributes: new { @class = "form-control", @onchange = "location.href = '/Lessons/Edit?id=" + Model.Id + "&classid='.concat(this.value);" })
                                            }


                                            @Html.ValidationMessageFor(model => model.ClassId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TeacherId, "Teacher", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">

                                            @if (Session.GetUser().IsOnly(RoleType.Secretary))
                                            {
                                                @Html.DropDownList("TeacherId", null, htmlAttributes: new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" })
                                            }
                                            else
                                            {
                                                @Html.DropDownList("TeacherId", null, htmlAttributes: new { @class = "form-control" })
                                            }

                                            @Html.ValidationMessageFor(model => model.TeacherId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">

                                            @if (Session.GetUser().IsOnly(RoleType.Secretary))
                                            {
                                                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @Value = Model.Date.ToString("yyyy-MM-dd"), @readonly = "readonly", @disabled = "disabled" } })
                                            }
                                            else
                                            {
                                                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @Value = Model.Date.ToString("yyyy-MM-dd") } })
                                            }

                                            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">

                                            @if (Session.GetUser().IsOnly(RoleType.Secretary))
                                            {
                                                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                                            }
                                            else
                                            {
                                                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                                            }

                                            @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Topics, "Topics", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">

                                            @if (Session.GetUser().IsOnly(RoleType.Secretary))
                                            {
                                                @Html.ListBox("topics", null, htmlAttributes: new { @class = "form-control", @style = "min-height:150px;", @readonly = "readonly", @disabled = "disabled" })
                                            }
                                            else
                                            {
                                                @Html.ListBox("topics", null, htmlAttributes: new { @class = "form-control", @style = "min-height:150px;" })
                                            }


                                            @Html.ValidationMessageFor(model => model.Topics, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Students, "Students", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.ListBox("students", null, htmlAttributes: new { @class = "form-control", style = "min-height: 300px;" })
                                            @Html.ValidationMessageFor(model => model.Students, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.BinaryId, "Change File", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-12">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <script type="text/javascript">
                                                        var tempFilename = "";
                                                        var updateFilename = function (input) {
                                                            if (input.files && input.files[0]) {
                                                                document.getElementById("uploadLabel").innerHTML = input.files[0].name;
                                                            }
                                                        };
                                                    </script>

                                                    <input type="file" id="MyUpload" name="upload" class="inputfile" onchange="updateFilename(this)" />
                                                    <label id="uploadLabel" class="btn btn-danger" for="MyUpload">Choose a file</label>
                                                    @Html.ValidationMessageFor(model => model.BinaryId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </section>
                        </div>
                    </div>
                </div>

            </div>

        </div>
    </div>
    
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
