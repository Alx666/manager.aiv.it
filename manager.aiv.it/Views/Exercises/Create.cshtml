@model manager.aiv.it.Exercise

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm("Create", "Exercises", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
    </div>

    <div class="row row-title">
        <div class="col col-xs-4 col-sm-2">
            <div class="text-left">
                <a class="btn btn-default" href="@Url.Action("Index")">
                    <i class="glyphicon glyphicon-chevron-left pull-left icon-left"></i>
                    <span>Back</span>
                </a>
            </div>
        </div>
        <div class="col col-xs-4 col-sm-8">
            <span class="title">Create Exercise</span>
        </div>
        <div class="col col-xs-4 col-sm-2">
            <div class="text-right">

                <button type="submit" class="btn btn-primary">
                    <i class="glyphicon glyphicon-floppy-disk pull-right icon-right"></i>
                    <span>Save</span>
                </button>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">
            <div class="card">
                <div class="card-content">
                    <div class="form-horizontal">

                        <div class="form-group">
                            @Html.LabelFor(model => model.CourseId, "Course", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("CourseId", null, htmlAttributes: new { @class = "form-control", @onchange = "location.href = '/Exercises/Create?courseid='.concat(this.value);", required = "required" })
                                @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Topics, "Topics", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                               
                                @Html.ListBox("topics", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Topics, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.TypeId, "TypeId", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("TypeId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("Value", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.BinaryId, "Change File", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div class="row">
                                    <div class="col-md-6">
                                        <script type="text/javascript">
                                            var tempFilename = "";
                                            var updateFilename = function (input) {
                                                if (input.files && input.files[0]) {
                                                    document.getElementById("uploadLabel").innerHTML = input.files[0].name;
                                                }
                                            };
                                        </script>

                                        <input type="file" id="MyUpload" name="upload" class="inputfile" onchange="updateFilename(this)" />
                                        <label id="uploadLabel" class="btn btn-danger" for="MyUpload">Choose a file</label>
                                        @Html.ValidationMessageFor(model => model.BinaryId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}